<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Cutive+Mono&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
  <style>

    * {
      box-sizing: border-box;
    }

    html, body {
      background: #e1eae7;
      height: 100%;
      margin: 0;
      font-family: 'Cutive Mono', monospace;
    }

    body {
      padding: 3em;
    }

    a {
      color: #000100;
      font-size: 2.4rem;
      text-decoration: none;
    }

    a:hover {
      color: #000100b3;
    }

    a:active {
      color: #000100;
    }

    .banner {
      height: 330px;
    }

    .row {
      display: flex;
    }

    .mascot {
      flex: 1;
    }

    .mascot img {
      width: 720px;
      margin-left: -6em;
    }

    .home-dirs {
      flex: 3;
      padding: 30px;
      text-align: end;
    }

    .dir-text {
      background: white;
      padding: 0 10px;
      border-radius: 4px;
      font-size: 1.4rem;
    }

    .la-file-code {
      font-size: 1.7rem;
      transform: translate(24px, 4px);
    }

    .form {
      position: relative;
      padding: 30px;
      justify-content: end;
      display: flex;
    }

    .row {
      display: flex;
      width: 100%;
    }

    .inputs {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      width: 100%;
    }

    label, input {
      width: 100%;
    }

    .col-1 {
      flex: 1
    }

    .col-2 {
      flex: 2;
    }

    .col-3 {
      flex: 3;
    }

    .mt-15 {
      margin-top: 15px;
    }

    input:invalid {
      border: 2px solid red;
    }

    #invalid-message {
      color: red;
    }

  </style>
</head>
<body>

  <div class="banner row">
    <div class="mascot col-3">
      <img src="/assets/cover.png" />
    </div>
    <div class="form col-1">
      <div class="row">
        <div class="inputs">
          <label class="mt-15" htmlFor="username">Username</label>
          <input id="username" minlength="1" pattern="[A-za-z0-9]+" type="text" />
          <label class="mt-15" htmlFor="password">Password</label>
          <input id="password" minlength="1" type="password" />
          <button id="submit" class="mt-15">
            Create server
          </button>

          <p id="invalid-message"></p>

        </div>
      </div>
    </div>
  </div>


  <div class="home-dirs">
    <%-
      homeDirs.map(userName =>
        `<a href="http://localhost:8080/?arg=${userName}&arg=${userName}-server&arg=bash">
          <i class="las la-file-code"></i>
          <span class="dir-text">
            ${userName}
          </span>
        </a>`
      ).join('')
    %>
  </div>

  <script>
    const hashCode = function(pass) {
      let hash = 0, i, chr;
      if (pass.length === 0) return hash;
      for (i = 0; i < pass.length; i++) {
        chr   = pass.charCodeAt(i);
        hash  = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    };

    function showError(message) {
      if (!message) message = `
        Both Username and Password must be filled in.<br><br>
        The Username must only contain alphanumeric charactors. Eg Aa to Zz.
      `
      document.getElementById('invalid-message').innerHTML = message
    }

    const button = document.getElementById('submit')

    const username = document.getElementById('username')
    const password = document.getElementById('password')
    window.username = username

    button.addEventListener('click', submit)

    async function submit() {
      if (
        !username.validity.valid
        || !password.validity.valid
        || !username.value.length
        || !password.value.length
      ) {
        showError()
        return
      }

      try {
        const res = await fetch(`/create-server/${username.value}/${hashCode(password.value)}`)
        if (res.status !== 200) throw Error(res.statusText)
        window.location.reload()
      } catch (error) {
        showError('There was an error creating your server:<br><br>' + error.message)
        return
      }

    }

  </script>
</body>
</html>
