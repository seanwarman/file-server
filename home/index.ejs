<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Cutive+Mono&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
  <style>

    * {
      box-sizing: border-box;
    }

    html, body {
      background: #f6f2ea;
      height: 100%;
      margin: 0;
      font-family: 'Cutive Mono', monospace;
    }

    body {
      padding: 3em;
    }

    a {
      color: #000100;
      font-size: 2.4rem;
      text-decoration: none;
    }

    a:hover {
      color: #000100b3;
    }

    a:active {
      color: #000100;
    }

    .banner {
      height: 330px;
    }

    .row {
      justify-content: center;
      display: flex;
    }

    .mascot {
      flex: 1;
      justify-content: center;
      display: flex;
    }

    .mascot img {
      margin-top: -11em;
      margin-bottom: -6em;
    }

    .home-dirs {
      flex: 3;
      padding: 30px;
    }

    .dir-text {
      background: white;
      padding: 0 10px;
      border-radius: 4px;
      font-size: 1.4rem;
    }

    .la-file-code {
      font-size: 1.7rem;
      transform: translate(24px, 4px);
    }

    .form {
      position: relative;
      padding: 30px;
      justify-content: end;
      display: flex;
      max-width: 600px;
    }

    .row {
      display: flex;
      width: 100%;
    }

    .inputs {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      width: 100%;
    }

    label, input {
      width: 100%;
    }

    .col-1 {
      flex: 1
    }

    .col-2 {
      flex: 2;
    }

    .col-3 {
      flex: 3;
    }

    .mt-15 {
      margin-top: 15px;
    }

    input:invalid {
      border: 2px solid red;
    }

    #invalid-message {
      color: red;
    }

  </style>
</head>
<body>

  <div class="banner row">
    <div class="mascot col-3">
      <img src="/assets/cover.png" />
    </div>
  </div>
  <div class="row">
    <div class="form col-1">
      <div class="row">
        <div>
          <p>Make your own linux server by filling the form below</p>
          <div class="inputs">
            <label class="mt-15" htmlFor="username">User</label>
            <input onkeypress="submitEarly(event)" placeholder="Enter the username you want to use..." id="username" minlength="1" pattern="[A-za-z0-9]+" type="text" />
            <label class="mt-15" htmlFor="password">Sudo password</label>
            <input onkeypress="submitEarly(event)" placeholder="Enter the password you want for running sudo commands..." id="password" minlength="1" type="password" />
            <label class="mt-15" htmlFor="masterpassword">Master password</label>
            <input onkeypress="submitEarly(event)" id="masterpassword" minlength="1" type="password" />
            <button id="submit" class="mt-15">
              Create server
            </button>

            <p id="invalid-message"></p>

          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="home-dirs">
    <%-
      servers.map(userName =>
        `<a target="_blank" href="${baseUrl}:${gottyPort}/?arg=${userName}&arg=${userName}-server&arg=bash">
          <i class="las la-file-code"></i>
          <span class="dir-text">
            ${userName}
          </span>
        </a>`
      ).join('')
    %>
  </div>

  <script type="text/javascript" src="/modules/bower_components/crypto-js/crypto-js.js"></script>
  <script>
    function showError(message) {
      if (!message) message = `
        Username, Password and Master Password must be filled in.<br><br>
        The Username must only contain alphanumeric charactors. Eg Aa to Zz.
      `
      document.getElementById('invalid-message').innerHTML = message
    }

    const button = document.getElementById('submit')

    const username = document.getElementById('username')
    const password = document.getElementById('password')
    window.username = username

    button.addEventListener('click', submit)

    function submitEarly(event) {
      if (event.keyCode == 13) {
        submit()
      }
    }

    async function submit() {
      if (
        !username.validity.valid
        || !username.value.length
        || !password.validity.valid
        || !password.value.length
        || !masterpassword.validity.valid
        || !masterpassword.value.length
      ) {
        showError()
        return

      }

      function options(authHeader) {
        return {
          method: 'GET',
          mode: 'same-origin',
          cache:'no-cache',
          headers: {
            'Authorisation': authHeader
          },
        }
      }

      try {
        // Encrypt the user:password values...
        const userpass = CryptoJS.AES.encrypt(`${username.value}:${password.value}`, masterpassword.value)

        // Convert them into a base64 string (this is standard practice for the auth header)...
        const authHeader = window.btoa(`Basic ${userpass}`)

        // Send the authheader (detailed in `options`) but also add the username to the url...
        const res = await fetch(`/create-server/${username.value}`, options(authHeader))

        if (res.status === 401) return showError('Unauthorised')
        if (res.status === 409) return showError('User already exists, please try a different Username')
        if (res.status === 503) return showError('There was an error creating your server, please try again')
        if (res.status === 500) {
          const data = await res.json()
          console.log('Server error: ', data)
          return showError(data.message)
        }

        // Reload the window so the new server shows in the view...
        window.location.reload()

      } catch (error) {
        console.log('Error creating server: ', error)
        showError('There was an unknown error creating the server')

      }
    }

  </script>
</body>
</html>
